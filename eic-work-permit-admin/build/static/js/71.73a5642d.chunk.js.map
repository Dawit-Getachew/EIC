{"version":3,"sources":["content/pages/Status/Login/index.tsx"],"names":["type","MainContent","styled","Box","UserAuth","useState","useForm","register","handleSubmit","formState","errors","className"],"mappings":"0IA4CKA,E,0EA3BCC,EAAcC,YAAOC,IAAPD,EAClB,yL,SA0BGF,K,oCAAAA,E,kCAAAA,E,iCAAAA,M,KAyIUI,UAlIf,WACE,MAA8BC,oBAAS,GAAvC,mBACA,GADA,UACkCA,oBAAS,IAA3C,mBACA,GADA,UAC4CA,mBAAS,OAArD,mBACA,GADA,UACkCA,oBAAS,IAA3C,mBAgCA,GAhCA,UAoCIC,eAEJ,GANA,EACEC,SADF,EAEEC,aAFF,EAGEC,UAAaC,OAOXJ,eAmEJ,OAvEA,EACEC,SADF,EAEEC,aAFF,EAGEC,UAAaC,OAqEb,qCACE,cAAC,IAAD,UACE,qDAEF,cAACT,EAAD,UAEE,qBAAKU,UAAU,sB","file":"static/js/71.73a5642d.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Hidden,\r\n  Button,\r\n  CircularProgress,\r\n  Grid\r\n} from '@mui/material';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { FieldError, useForm } from \"react-hook-form\"\r\nimport \"./styles.css\"\r\nimport { styled } from '@mui/material/styles';\r\n// import { SignUpUser, LoginUser } from 'src/store/States/Auth/actions';\r\nimport { IUserInput, ILoginAccountInput } from 'src/store/States/Auth/user.types';\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\nconst MainContent = styled(Box)(\r\n  () => `\r\n    height: 100%;\r\n    display: flex;\r\n    flex: 1;\r\n    overflow: auto;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n);\r\n\r\ntype RegisterInputs = {\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  phone_number: string;\r\n  password: string;\r\n  role: string;\r\n}\r\n\r\ntype LoginInputs = {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// const for response types\r\nenum type {\r\n  \"ValidationErrors\" = \"ValidationErrors\",\r\n  \"ValidationError\" = \"ValidationError\",\r\n  \"IAccountSimple\" = \"IAccountSimple\",\r\n};\r\n\r\n\r\nfunction UserAuth() {\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  let [validationError, setValidationError] = useState(null);\r\n  let [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const signUpUser = (input: IUserInput) => {\r\n    setIsLoading(true)\r\n    // SignUpUser(input, (err: any, data: any) => {\r\n    //   console.log(\"here\", data)\r\n    //   setIsLoading(false)\r\n    // })\r\n  }\r\n  // let navigate = useNavigate();\r\n\r\n  // const loginUser = (input: ILoginInput) => {\r\n  //   setIsLoading(true)\r\n  //   LoginUser(input, (err: any, data: any) => {\r\n  //     switch (data.__typename) {\r\n  //       case type.ValidationError:\r\n  //         setValidationError(data.errors[0].error_message);\r\n  //         setIsLoading(false);\r\n  //         break;\r\n  //       case type.ValidationErrors:\r\n  //         console.log(data)\r\n  //         setIsLoading(false);\r\n  //         break;\r\n  //       case type.IAccountSimple:\r\n  //         console.log(\"successfully logged in\")\r\n  //         console.log(data)\r\n  //         setIsLoading(false)\r\n  //         window.location.href = \"/Category\"\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n\r\n  const {\r\n    register: registerSignup,\r\n    handleSubmit: handleRegisterSubmit,\r\n    formState: { errors: signupErrors },\r\n  } = useForm<RegisterInputs>();\r\n\r\n  const {\r\n    register: registerLogin,\r\n    handleSubmit: handleLoginSubmit,\r\n    formState: { errors: loginErrors },\r\n  } = useForm<LoginInputs>();\r\n\r\n  const errMessage = (labelText: string) => {\r\n    return <label style={{ color: \"red\" }}>{labelText}</label>\r\n  }\r\n\r\n  // const LoginForm = () => <form onSubmit={handleLoginSubmit(loginUser)}>\r\n  //   <h1>Login</h1>\r\n  //   <span style={{ display: validationError ? \" block ruby\" : \"none\", padding: 0 }} className=\"content\">{validationError ? validationError : null}</span>\r\n  //   <div className=\"content\">\r\n  //     <div className=\"input-field\">\r\n  //       <input type=\"email\" placeholder=\"Email\" autoComplete=\"nope\" {...registerLogin(\"email\", { required: \"This is a required field\" })} />\r\n  //       {loginErrors.email ? errMessage(loginErrors.email.message) : null}\r\n  //     </div>\r\n  //     <div className=\"input-field\">\r\n  //       <input type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" {...registerLogin(\"password\", { required: \"This is a required field\" })} />\r\n  //       {loginErrors.password ? errMessage(loginErrors.password.message) : null}\r\n  //     </div>\r\n  //     <a href=\"#\" className=\"link\" onClick={() => setIsLogin(false)}>Don't have an account?</a>\r\n  //   </div>\r\n  //   <div className=\"action\">\r\n  //     <button style={{ display: \"none\" }}></button>\r\n  //     <button type=\"submit\" onClick={() => setIsLogin(false)}>\r\n  //       {isLoading ? <CircularProgress /> : \"Login\"}\r\n  //     </button>\r\n  //   </div>\r\n  // </form>\r\n\r\n  const SignUpForm = () => <form onSubmit={handleRegisterSubmit(signUpUser)}>\r\n    <h1>Signup</h1>\r\n    <div className=\"content\">\r\n      <div className=\"input-field\">\r\n        <input type=\"text\" placeholder=\"First Name\" autoComplete=\"nope\" {...registerSignup(\"first_name\", { required: \"This is a required field\" })} />\r\n        {signupErrors.first_name ? errMessage(signupErrors.first_name.message) : null}\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <input type=\"text\" placeholder=\"Last Name\" autoComplete=\"nope\" {...registerSignup(\"last_name\", { required: \"This is a required field\" })} />\r\n        {signupErrors.last_name ? errMessage(signupErrors.last_name.message) : null}\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <input type=\"text\" placeholder=\"Phone Number\" autoComplete=\"nope\" {...registerSignup(\"phone_number\", { required: \"This is a required field\" })} />\r\n        {signupErrors.phone_number ? errMessage(signupErrors.phone_number.message) : null}\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <select className=\"input-field\" {...registerSignup(\"role\", { required: \"This is a required field\" })}>\r\n          <option value=\"ADMIN\">Admin</option>\r\n        </select>\r\n        {signupErrors.role ? errMessage(signupErrors.role.message) : null}\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <input type=\"email\" placeholder=\"Email\" autoComplete=\"nope\" {...registerSignup(\"email\", { required: \"This is a required field\" })} />\r\n        {signupErrors.email ? errMessage(signupErrors.email.message) : null}\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <input type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" {...registerSignup(\"password\", { required: \"This is a required field\" })} />\r\n        {signupErrors.password ? errMessage(signupErrors.password.message) : null}\r\n      </div>\r\n      <a href=\"#\" className=\"link\" onClick={() => setIsLogin(true)}>Already have an account?</a>\r\n    </div>\r\n    <div className=\"action\">\r\n      <button style={{ display: \"none\" }}></button>\r\n      <button type=\"submit\" onClick={() => setIsLogin(false)}>\r\n        {isLoading ? <CircularProgress /> : \"Register\"}\r\n      </button>\r\n    </div>\r\n  </form>\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>User Auth Form</title>\r\n      </Helmet>\r\n      <MainContent>\r\n\r\n        <div className=\"login-form\">\r\n          {/* {isLogin ? LoginForm() : SignUpForm()} */\r\n            // LoginForm()\r\n          }\r\n        </div>\r\n      </MainContent>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserAuth;"],"sourceRoot":""}